// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  VideoSummary  VideoSummary[]
  chatMessages  ChatMessage[] // One user can have multiple chat messages
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model VideoSummary {
  id               String   @id @default(cuid())
  userId           String  // Links to User model
  videoId          String   @unique // YouTube video ID
  videoTitle       String
  videoUrl         String
  videoChannel     String
  videoThumbnail   String
  summary          String? // Store final summary
  transcriptChunks String[] // List of whole transcript parts
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Fix relation: explicitly name it and refer to it correctly in ChatMessage
  chats ChatMessage[] @relation("VideoChat")
}

model ChatMessage {
  id        String   @id @default(cuid())  
  userId    String
  videoId   String
  messages  Json // Store messages as an array of objects (JSON)
  createdAt DateTime @default(now())

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure this relation correctly references VideoSummary's videoId
  video     VideoSummary @relation(fields: [videoId], references: [videoId], onDelete: Cascade, name: "VideoChat")
}